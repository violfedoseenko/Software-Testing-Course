{
	"info": {
		"_postman_id": "aacad60d-d740-4a69-bb1c-86776d5d56d8",
		"name": "HomeWork_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20771799"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// let req = JSON.parse(request.data);\r",
							"// console.log (req)\r",
							"let response= pm.response.text();\r",
							"\r",
							"\r",
							"pm.test(\"Body is string\", function () {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// POST http://162.55.220.72:5005/user_info_3\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let response= pm.response.json();\r",
							"console.log(\"response=\", response)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Name_test_1\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Kate\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Age_test_1\", function () {\r",
							"    pm.expect(response.age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Salary_test_1\", function () {\r",
							"    pm.expect(response.salary).to.eql(4000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"console.log (\"rec=\", req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_test_2\", function () {\r",
							"    pm.expect(response.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_test_2\", function () {\r",
							"    pm.expect(response.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_test_2\", function () {\r",
							"    pm.expect(response.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5_check = req.salary * 4\r",
							"pm.test(\"Salary_check_1_5_years\", function () {\r",
							"    pm.expect(response.family.u_salary_1_5_year).to.eql(salary_1_5_check);\r",
							"});\r",
							"console.log(response.family[1])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// сделано\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// сделано\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// сделано\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// сделано\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let response= pm.response.json();\r",
							"console.log(\"response=\", response)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"console.log (\"rec=\", req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"param 'start_qa_salary' exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"param 'qa_salary_after_6_months' exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"param 'qa_salary_after_12_monthsy' exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"param 'qa_salary_after_1.5_year'exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"param 'qa_salary_after_3.5_years'exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"param 'person' exists\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"'start_qa_salary' eql 'salary'\" , function () {\r",
							"    pm.expect(response.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_6_months' eql 2*'salary'\" , function () {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(2*req.salary);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_12_months' eql 2.7*'salary'\" , function () {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(2.7*req.salary);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_1.5_year' eql 3.3*'salary'\" , function () {\r",
							"    pm.expect(response['qa_salary_after_1.5_year']).to.eql(3.3*req.salary);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"'qa_salary_after_3.5_years' eql 3.8*'salary'\" , function () {\r",
							"    pm.expect(response['qa_salary_after_3.5_years']).to.eql(3.8*req.salary);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] from person eql 'salary'in request\" , function () {\r",
							"    pm.expect(response.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age eql 'age'in request\" , function () {\r",
							"    pm.expect(response.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"'u_salary_5_years' eql 4.2*'salary'\" , function () {\r",
							"    pm.expect(response.person.u_salary_5_years).to.eql(4.2*req.salary);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let personKey in response.person){\r",
							"    console.log(personKey+':'+ response.person[personKey]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// GET http://162.55.220.72:5005/object_info_3?name=Den&age=45&salary=5000\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let response= pm.response.json();\r",
							"console.log(\"response=\", response)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let url = 'http://162.55.220.72'\r",
							"let req =  pm.request.url.query.toObject()\r",
							"console.log (\"rec=\", req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_test_1\", function () {\r",
							"    pm.expect(response.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_test_1\", function () {\r",
							"    pm.expect(response.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_test_1\", function () {\r",
							"    pm.expect(response.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(response.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check_dog_have_name\", function () {\r",
							"  pm.expect(response.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check_dog_have_age\", function () {\r",
							"  pm.expect(response.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check_name_of_dog_is_Luky\", function () {\r",
							"  pm.expect(response.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check_dog_age_is_4\", function () {\r",
							"  pm.expect(response.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Den",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "45",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Den&age=45&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Den"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// GET http://162.55.220.72:5005/object_info_3?name=Viki&age=24&salary=3100\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let response= pm.response.json();\r",
							"console.log(\"response=\", response)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let url = 'http://162.55.220.72';\r",
							"let req =  pm.request.url.query.toObject();\r",
							"console.log (\"rec=\", req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_test\", function () {\r",
							"    pm.expect(response.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_test\", function () {\r",
							"    pm.expect(response.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(response.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(response.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(response.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(response.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_test_1\", function () {\r",
							"    pm.expect(response.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_test_2\", function () {\r",
							"    pm.expect(+response.salary[1]).to.eql(2*req.salary);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_test_2\", function () {\r",
							"    pm.expect(+response.salary[2]).to.eql(3*req.salary);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"let jsonData = pm.response.json();\r",
							"let user_name = jsonData.name;\r",
							"console.log(user_name)\r",
							"pm.environment.set(\"name\", user_name);\r",
							"// 19. Передать в окружение переменную age\r",
							"let user_age = jsonData.age;\r",
							"pm.environment.set(\"age\", user_age);\r",
							"console.log(user_age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"let user_salary = jsonData.salary[0];\r",
							"pm.environment.set(\"salary\", user_salary);\r",
							"console.log(user_salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let k=0;\r",
							"selary_item = response.salary.length\r",
							"while(k<selary_item) {\r",
							"    console.log(response.salary[k]);\r",
							"    k++;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Den",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "45",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Viki&age=24&salary=3100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Viki"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "3100"
						}
					]
				}
			},
			"response": []
		}
	]
}